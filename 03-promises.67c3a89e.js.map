{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,QAC9BC,EAAYF,SAASC,cAAc,uBACnCE,EAAOH,SAASC,cAAc,sBAC9BG,EAASJ,SAASC,cAAc,wBAyCtCF,EAAKM,iBAAiB,UAzBC,SAAAC,GACrBA,EAAMC,iBACN,IAMwBC,EANpBC,EAAcP,EAAUQ,MACxBC,EAAQC,SAASH,GACfI,EAAYV,EAAKO,MACjBI,EAAiBV,EAAOM,MAE1BK,EAAW,GAtBK,SAACA,EAAUP,GAC/B,IAAMQ,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,GACFO,QAAQC,IAAI,UAAWT,EAAUP,GACjCY,EAAQ,uBAAwCK,OAAfV,EAAS,QAAYU,OAANjB,EAAM,SAEtDe,QAAQC,IAAI,SAAUT,EAAUP,GAChCa,EAAO,sBAAqCI,OAAfV,EAAS,QAAYU,OAANjB,EAAM,O,GAEnDA,E,KAaHkB,CAAcX,IADQP,EAcRG,GAZXgB,MAAK,SAAAjB,GACJb,EAAA+B,OAAOC,QAAQnB,E,IAEhBoB,OAAM,SAAAC,GACLlC,EAAA+B,OAAOI,QAAQD,E,IAEhBE,SAAQ,WAEP,OADAV,QAAQC,IAAIT,EAAUP,GACfO,GAAYD,EACfoB,EAAErB,GACFU,QAAQC,IAAI,S","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('form');\nconst delayTime = document.querySelector('input[name=\"delay\"]');\nconst step = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\nconst createPromise = (position, delay) => {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        console.log('resolve', position, delay);\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        console.log('reject', position, delay);\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n};\n\nconst createPromises = event => {\n  event.preventDefault();\n  let delayString = delayTime.value;\n  let delay = parseInt(delayString);\n  const delayStep = step.value;\n  const promisesAmount = amount.value;\n\n  let position = 1;\n  const promisesHandler = delay =>\n    createPromise(position++, delay)\n      .then(value => {\n        Notify.success(value);\n      })\n      .catch(error => {\n        Notify.failure(error);\n      })\n      .finally(() => {\n        console.log(position, delay);\n        return position <= promisesAmount\n          ? x(delayStep)\n          : console.log('finish');\n      });\n  promisesHandler(delay);\n};\n\nform.addEventListener('submit', createPromises);\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayTime","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","addEventListener","event","preventDefault","delay","delayString","value","delay1","parseInt","delayStep","promisesAmount","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","console","log","concat","$ce04d3a99e08e73b$var$createPromise","then","Notify","success","catch","error","failure","finally","x"],"version":3,"file":"03-promises.67c3a89e.js.map"}