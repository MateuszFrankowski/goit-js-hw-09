{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SACMC,EAAcC,SAASC,cAAc,UACrCC,EAAOF,SAASC,cAAc,QAC9BE,EAAYH,SAASC,cAAc,uBACnCG,EAAOJ,SAASC,cAAc,sBAC9BI,EAASL,SAASC,cAAc,wBAChCK,EAAgB,SAACC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBQ,mB,KAkCPd,EAAKe,iBAAiB,UA9BC,SAAAC,GACrBA,EAAMC,iBACNpB,EAAYqB,UAAW,EACvB,IAAIC,EAAQC,SAASnB,EAAUoB,OACzBC,EAAYF,SAASlB,EAAKmB,OAC1BE,EAAiBpB,EAAOkB,MAE1BhB,EAAW,EACTmB,EAAkB,SAAAlB,G,OACtBF,EAAcC,IAAYC,GACvBmB,MAAK,SAAAJ,GACJ1B,EAAA+B,OAAOC,QACL,uBAA8CC,OAArBP,EAAMhB,SAAS,QAAkBuB,OAAZP,EAAMf,MAAM,M,IAG7DuB,OAAM,SAAAC,GACLnC,EAAA+B,OAAOK,QACL,sBAA2CH,OAArBE,EAAMzB,SAAS,QAAkBuB,OAAZE,EAAMxB,MAAM,M,IAG1D0B,SAAQ,WAGP,OAFA1B,GAAgBgB,EACKA,EACdjB,GAAYkB,EACfC,EAAgBlB,GACfT,EAAYqB,UAAW,C,KAElCM,EAAgBL,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst btnPromises = document.querySelector('button');\nconst form = document.querySelector('form');\nconst delayTime = document.querySelector('input[name=\"delay\"]');\nconst step = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\nconst createPromise = (position, delay) => {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delayFromEachOther);\n  });\n};\n\nconst createPromises = event => {\n  event.preventDefault();\n  btnPromises.disabled = true;\n  let delay = parseInt(delayTime.value);\n  const delayStep = parseInt(step.value);\n  const promisesAmount = amount.value;\n  const delayFromEachOther = delay;\n  let position = 1;\n  const promisesHandler = delay =>\n    createPromise(position++, delay)\n      .then(value => {\n        Notify.success(\n          `✅ Fulfilled promise ${value.position} in ${value.delay}ms`\n        );\n      })\n      .catch(error => {\n        Notify.failure(\n          `❌ Rejected promise ${error.position} in ${error.delay}ms`\n        );\n      })\n      .finally(() => {\n        delay = delay + delayStep;\n        delayFromEachOther = delayStep;\n        return position <= promisesAmount\n          ? promisesHandler(delay)\n          : (btnPromises.disabled = false);\n      });\n  promisesHandler(delay);\n};\n\nform.addEventListener('submit', createPromises);\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$btnPromises","document","querySelector","$ce04d3a99e08e73b$var$form","$ce04d3a99e08e73b$var$delayTime","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","delayFromEachOther","addEventListener","event","preventDefault","disabled","delay1","parseInt","value","delayStep","promisesAmount","promisesHandler","then","Notify","success","concat","catch","error","failure","finally"],"version":3,"file":"03-promises.058b0235.js.map"}