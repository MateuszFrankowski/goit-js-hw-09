{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SACA,MAAMC,EAAcC,SAASC,cAAc,UACrCC,EAAOF,SAASC,cAAc,QAC9BE,EAAYH,SAASC,cAAc,uBACnCG,EAAOJ,SAASC,cAAc,sBAC9BI,EAASL,SAASC,cAAc,wBAChCK,EAAgB,CAACC,EAAUC,KAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BQ,mBAAmB,GACtB,EAiCJd,EAAKe,iBAAiB,UA9BCC,IACrBA,EAAMC,iBACNpB,EAAYqB,UAAW,EACvB,IAAIC,EAAQC,SAASnB,EAAUoB,OAC/B,MAAMC,EAAYF,SAASlB,EAAKmB,OAC1BE,EAAiBpB,EAAOkB,MACxBP,EAAqBK,EAC3B,IAAId,EAAW,EACf,MAAMmB,EAAkBlB,GACtBF,EAAcC,IAAYC,GACvBmB,MAAKJ,IACJ1B,EAAA+B,OAAOC,QACL,uBAAqBN,EAAIhB,eAAmBgB,EAAEf,UAAc,IAG/DsB,OAAMC,IACLlC,EAAA+B,OAAOI,QACL,sBAAoBD,EAAExB,eAAmBwB,EAAEvB,UAAc,IAG5DyB,SAAQ,KACPzB,GAAgBgB,EAChBR,EAAqBQ,EACdjB,GAAYkB,EACfC,EAAgBlB,GACfT,EAAYqB,UAAW,KAElCM,EAAgBL,EAAM","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst btnPromises = document.querySelector('button');\nconst form = document.querySelector('form');\nconst delayTime = document.querySelector('input[name=\"delay\"]');\nconst step = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\nconst createPromise = (position, delay) => {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delayFromEachOther);\n  });\n};\n\nconst createPromises = event => {\n  event.preventDefault();\n  btnPromises.disabled = true;\n  let delay = parseInt(delayTime.value);\n  const delayStep = parseInt(step.value);\n  const promisesAmount = amount.value;\n  const delayFromEachOther = delay;\n  let position = 1;\n  const promisesHandler = delay =>\n    createPromise(position++, delay)\n      .then(value => {\n        Notify.success(\n          `✅ Fulfilled promise ${value.position} in ${value.delay}ms`\n        );\n      })\n      .catch(error => {\n        Notify.failure(\n          `❌ Rejected promise ${error.position} in ${error.delay}ms`\n        );\n      })\n      .finally(() => {\n        delay = delay + delayStep;\n        delayFromEachOther = delayStep;\n        return position <= promisesAmount\n          ? promisesHandler(delay)\n          : (btnPromises.disabled = false);\n      });\n  promisesHandler(delay);\n};\n\nform.addEventListener('submit', createPromises);\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$btnPromises","document","querySelector","$47d4ff9957288465$var$form","$47d4ff9957288465$var$delayTime","$47d4ff9957288465$var$step","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","delayFromEachOther","addEventListener","event","preventDefault","disabled","delay1","parseInt","value","delayStep","promisesAmount","promisesHandler","then","Notify","success","catch","error","failure","finally"],"version":3,"file":"03-promises.91988d66.js.map"}